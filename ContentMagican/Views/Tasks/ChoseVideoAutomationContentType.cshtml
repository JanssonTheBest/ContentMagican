@using ContentMagican.Services
@{
    // If you need any logic here
}

<style>
    /* 9:16 ratio => height is ~177.78% of width for vertical Shorts */
    .ratio-9x16 {
        --bs-aspect-ratio: 177.78%;
    }

    /* Highlight selected card */
    .clickable-card.selected {
        border: 2px solid #007bff;
        box-shadow: 0 0 10px rgba(0, 123, 255, 0.5);
    }

    /* Scrollable container for card grid */
    .card-scrollbox {
        max-height: 600px; /* Adjust as needed */
        overflow-y: auto;
        overflow-x: hidden; /* Disable horizontal scroll */
        padding-right: 15px; /* Optional: To prevent content from being hidden under the scrollbar */
    }

        /* Ensure the row takes full width and centers its content */
        .card-scrollbox .row {
            margin-right: 0;
            margin-left: 0;
            display: flex;
            flex-wrap: wrap;
            justify-content: center; /* Center the columns */
        }

    /* Disable pointer events on the iframe so user can't interact/click inside it */
    .clickable-card iframe {
        pointer-events: none;
    }

    /* Ensure the card takes the full width of its column */
    .clickable-card {
        width: 100%;
    }

    /* Optional: Reduce card padding and margins for smaller size */
    .card-body {
        padding: 0.5rem; /* Reduced from default */
    }

    /* Optional: Adjust font sizes for smaller cards */
    .card-title {
        font-size: 1rem; /* Adjust as needed */
    }

    /* Optional: Adjust the iframe ratio if needed */
    .ratio-9x16 iframe {
        width: 100%;
        height: 100%;
    }
</style>

<div class="container mt-4">
    <h1 class="text-center mb-4">Choose a content type</h1>

    <form action="@Url.Action("ChangeTaskSettings","Tasks")" method="get" style="min-height:10vh">
        <!-- Scrollable container that holds the cards. -->
        <div class="card-scrollbox mb-3">
            <!-- Card Grid with increased columns for smaller cards and centered alignment -->
            <div class="row row-cols-2 row-cols-sm-4 row-cols-md-6 g-3 justify-content-center">
                @for (int i = 0; i < TaskService.videoAutomationAlternatives.Count; i++)
                {
                    <div class="col">
                        <div class="card clickable-card h-100" data-value="@i">
                            <!-- Use the custom ratio for vertical Shorts -->
                            <div class="ratio ratio-9x16">
                                @Html.Raw(TaskService.videoAutomationAlternatives[i].iframeUrl)
                            </div>
                            <div class="card-body text-center">
                                <h5 class="card-title mb-0">
                                    @TaskService.videoAutomationAlternatives[i].type.ToString().Replace('_', ' ')
                                </h5>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Hidden input to store selected option index -->
        <input type="hidden" name="r" id="selectedOption" />

        <!-- Next button remains visible even if card list is tall -->
        <div class="d-flex justify-content-end">
            <button type="submit" class="btn btn-primary" id="nextButton" disabled style="height:40px">
                Next
            </button>
        </div>
    </form>
</div>

<!-- JavaScript to handle card selection and enabling the Next button -->
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const cards = document.querySelectorAll('.clickable-card');
        const nextButton = document.getElementById('nextButton');
        const hiddenInput = document.getElementById('selectedOption');

        function clearSelections() {
            cards.forEach(card => card.classList.remove('selected'));
        }

        cards.forEach(card => {
            card.addEventListener('click', () => {
                // Clear previous selection and mark the clicked card as selected
                clearSelections();
                card.classList.add('selected');

                // Update hidden input value and enable Next button
                hiddenInput.value = card.dataset.value;
                nextButton.disabled = false;
            });
        });
    });
</script>
